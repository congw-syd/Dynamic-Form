{"version":3,"sources":["components/TextInput.js","components/Select.js","components/NumInput.js","components/DynamicForm.js","App.js","serviceWorker.js","index.js"],"names":["TextInput","_ref","id","name","required","onChange","display","react_default","a","createElement","className","key","htmlFor","type","pattern","DropdownSelect","options","value","map","option","NumInput","unitOfMeasure","max","min","dynamicForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","onSubmit","e","preventDefault","setState","defineProperty","target","renderForm","model","m","components_TextInput","displayName","isRequired","Select","components_NumInput","bounds","upperLimit","_this2","title","React","Component","App","data","gender","weight","height","bmi","hasOwnProperty","toFixed","assign","console","log","JSON","stringify","concat","toConsumableArray","DynamicForm_dynamicForm","isDefault","sortOrder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ae3412a.chunk.js","sourcesContent":["import React from \"react\";\n/*\nreturn (\n\t\t\t\t\t<div key={m.id} className = 'form-content'>\n\t\t\t\t\t\t<label className = 'form-label'\n\t\t\t\t\t\t\tkey = {m.id+'1'}\n\t\t\t\t\t\t\thtmlFor = {m.id}>\n\t\t\t\t\t\t\t{m.displayName}\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\trequired = {m.isRequired}\n\t\t\t\t\t\t\tref = {(key)=>{this[m.id]=key}}\n\t\t\t\t\t\t\tclassName = 'form-input'\n\t\t\t\t\t\t\ttype = {m.type}\n\t\t\t\t\t\t\tkey = {'i'+m.id}\n\t\t\t\t\t\t\tonChange = {(e)=>{this.onChange(e,key)}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t);*/\nconst TextInput = ({ id, name, required, onChange, display}) => {\n\tif( display === true){\n\t\tif(id === \"name\"){\n\t\treturn(\n\t\t\t<div className=\"form-group\">\n\t      \t\t<label className = \"form-content\" key = {id+'i'} htmlFor = {id}>\n\t        \t\t{name}\n\t      \t\t</label>\n\t      \t\t<input\n\t\t\t        className = \"form-input\"\n\t\t\t        type = \"text\"\n\t\t\t        pattern=\"(?=^.{0,40}$)^[a-zA-Z-]+\\s[a-zA-Z-]+$\"\n\t\t\t        id = {id}\n\t\t\t        name = {name}\n\t\t\t        required = {required}\n\t\t\t        onChange = {onChange}\n\t\t        />\n\t\t    </div>\n\t\t\t);\n\t\t}else{\n\t\treturn(\n\t\t\t<div className=\"form-group\">\n\t      \t\t<label className = \"form-content\">\n\t        \t\t{name}\n\t      \t\t</label>\n\t      \t\t<input\n\t\t\t        className = \"form-input\"\n\t\t\t        type = \"text\"\n\t\t\t        id = {id}\n\t\t\t        name = {name}\n\t\t\t        required = {required}\n\t\t\t        onChange = {onChange}\n\t\t        />\n\t\t    </div>\n\t\t\t);\n\t\t}\n\t}else{\n\t\treturn(<input type=\"hidden\"/>);\n\t}\n\t\n\n};\n\nexport default TextInput;","import React from \"react\";\n\nconst DropdownSelect = ({ id, name, onChange, required, options, display}) =>{\n\tif( display === true){\n\t\treturn (\n\t\t<div className=\"form-group\">\n\t\t\t<label className = \"form-content\" key = {id+'i'} htmlFor = {id}>\n\t\t\t\t{name}\n\t\t\t</label>\n\t\t\t<select \n\t\t\t\tclassName=\"form-input\" \n\t\t\t\tid={id} \n\t\t\t\trequired = {required} \n\t\t\t\tonChange = {onChange} >\n\n\t\t\t\t<option value = \"default\"></option>\n\t\t\t\t{options.map(option=>{\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<option key = {option.id} value = {option.name}>{option.name}</option>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</select>\n\t\t</div>\n\t\t);\n\t}else{\n\t\treturn(<input type=\"hidden\"/>);\n\t}\n\t\n};\n\nexport default DropdownSelect;","import React from \"react\";\n\nconst NumInput = ({ id, name, unitOfMeasure, required, display, max, onChange}) => {\n\tif( display === true){\n\t\treturn (\n\t\t<div className=\"form-group\">\n\t      <label className = \"form-content\" key = {id+'i'} htmlFor = {id}>\n\t        {name} ({unitOfMeasure})\n\t      </label>\n\t      <input\n\t        className = \"form-input\"\n\t        id = {id}\n\t        name = {name}\n\t        type = \"number\"\n\t        min = \"1\"\n\t        required = {required}   \n\t        max = {max}\n\t        onChange = {onChange}\n\t      />\n\t    </div>\n\t\t);\n\t}else{\n\t\treturn(<input type=\"hidden\"/>);\n\t}\n\t\n\n};\n\nexport default NumInput;","import React from 'react';\nimport TextInput from './TextInput';\nimport Select from './Select';\nimport NumInput from './NumInput';\nimport './DynamicForm.css';\n\nexport default class dynamicForm extends React.Component{\n\tstate = {};\n\tconstructor(props){\n\t\tsuper(props);\n\t}\n\tonSubmit = (e) => {\n\t\te.preventDefault();\n\t\tif(this.props.onSubmit) this.props.onSubmit(this.state);\n\t}\n\tonChange = (e)=>{\n\t\tthis.setState({\n\t\t\t[e.target.id]: e.target.value\n\t\t})\n\t}\n\trenderForm = () =>{\n\t\tlet model = this.props.model;\n\t\tlet formUI = model.map((m)=>{\n\t\t\tif(m.type === 'textInput'){\n\t\t\t\treturn (\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\tkey = {m.id+'i'}\n\t\t\t\t\t\tid = {m.id}\n\t\t\t\t\t\tname = {m.displayName}\n\t\t\t\t\t\trequired = {m.isRequired}\n\t\t\t\t\t\tdisplay = {m.display}\n\t\t\t\t\t\tonChange = {this.onChange}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\tif(m.type === 'select'){\n\t\t\t\treturn(\n\t\t\t\t\t<Select\n\t\t\t\t\t\tkey = {m.id+'i'}\n\t\t\t\t\t\tid = {m.id}\n\t\t\t\t\t\tname = {m.displayName}\n\t\t\t\t\t\trequired = {m.isRequired}\n\t\t\t\t\t\tdisplay = {m.display}\n\t\t\t\t\t\toptions = {m.options}\n\t\t\t\t\t\tonChange = {this.onChange}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\tif(m.type === 'numberInput'){\n\t\t\t\treturn(\n\t\t\t\t\t<NumInput\n\t\t\t\t\t\tkey = {m.id+'i'}\n\t\t\t\t\t\tid = {m.id}\n\t\t\t\t\t\tname = {m.displayName}\n\t\t\t\t\t\trequired = {m.isRequired}\n\t\t\t\t\t\tdisplay = {m.display}\n\t\t\t\t\t\tunitOfMeasure = {m.unitOfMeasure}\n\t\t\t\t\t\tmax = {m.bounds.upperLimit}\n\t\t\t\t\t\tonChange = {this.onChange}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\treturn formUI;\n\t}\n\n\trender(){\n\t\tlet title = this.props.title || 'Dyanmic Form';\n\n\t\treturn(\n\t\t\t<div className='main'>\n\t\t\t\t<h1>{title}</h1>\n\t\t\t\t<form className = 'dynamic-form' onSubmit={(e)=>{this.onSubmit(e)}}>\n\t\t\t\t\t{this.renderForm()}\n\t\t\t\t\t<div className = 'form-content'>\n\t\t\t\t\t\t<button type = 'submit'> Submit </button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React, {Component} from 'react';\nimport DynamicForm from './components/DynamicForm';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    data: [\n      {name: 'test', gender: 1, weight: 70, height: 175, bmi: 24.2}\n    ]\n  }\n  onSubmit = (model) => {\n    if(model.hasOwnProperty('height')){\n      let bmi = model.weight/(model.height*model.height)*10000;\n      bmi = bmi.toFixed(1);\n      Object.assign(model,{bmi});\n    }\n    console.log(JSON.stringify(model));\n    this.setState({\n      data: [ model, ...this.state.data]\n    })\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <DynamicForm \n            title = \"Head-Circumference\"\n           /* model = {[\n              {\n                id: 'name',\n                displayName: 'Name',\n                type: 'textInput',\n                display: true,\n                isRequired: true\n              },\n              {\n                id: 'gender',\n                displayName: 'Gender',\n                type: 'select',\n                options: [\n                  {\n                    id: 1,\n                    name: 'Male',\n                    isDefault: true,\n                    sortOrder: 1\n                  },\n                  {\n                    id: 2,\n                    name: 'Female',\n                    isDefault: false,\n                    sortOrder: 2\n                  }\n                ],\n                display: true,\n                isRequired: false\n              },\n              {\n                id: 'weight',\n                displayName: 'Weight',\n                unitOfMeasure: 'kg',\n                type: 'numberInput',\n                bounds: {\n                  upperLimit: 1000,\n                },\n                display: true,\n                isRequired: true\n              },\n              {\n                id: 'height',\n                displayName: 'Height',\n                unitOfMeasure: 'cm',\n                type: 'numberInput',\n                bounds: {\n                  upperLimit: 300,\n                },\n                display: true,\n                isRequired: true\n              },\n              {\n                id: 'bmi',\n                displayName: 'BMI',\n                unitOfMeasure: 'kg/m2',\n                type: 'numberInput',\n                bounds: {\n                  upperLimit: 100,\n                },\n                display: false,\n                isRequired: false\n              },\n            ]}*/\n            model = {[\n              {\n                id: 'name',\n                displayName: 'Name',\n                type: 'textInput',\n                display: true,\n                isRequired: true\n              },\n              {\n                id: 'gender',\n                displayName: 'Gender',\n                type: 'select',\n                options: [\n                  {\n                    id: 1,\n                    name: 'Male',\n                    isDefault: true,\n                    sortOrder: 1\n                  },\n                  {\n                    id: 2,\n                    name: 'Female',\n                    isDefault: false,\n                    sortOrder: 2\n                  }\n                ],\n                display: true,\n                isRequired: false\n              },\n              {\n                id: 'head-circumference',\n                displayName: 'Head Circumference',\n                unitOfMeasure: 'cm',\n                type: 'numberInput',\n                bounds: {\n                  upperLimit: 1000,\n                },\n                display: true,\n                isRequired: true\n              }\n            ]}\n            onSubmit = { (model)=>{this.onSubmit(model)}}\n        />\n      </div>\n    );\n  }\n    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}